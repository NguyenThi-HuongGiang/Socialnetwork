# -*- coding: utf-8 -*-
"""B1_TH2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LEMQgZzPjlf4FROS4PKJsSw3rYL_gCTf
"""

import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt
import urllib.request
import numpy as np
import io

def download_and_read_data():
  """
  Tai va doc du lieu tu mang xa hoi fb ( tu snap)
  """
  url = "https://snap.stanford.edu/data/facebook_combined.txt.gz"
  response = urllib.request.urlopen(url)
  data = response.read()

  #giai nen
  df = pd.read_csv(io.BytesIO(data),
                   compression= 'gzip',
                   sep=" ",
                   names=["source", "target"])
  return df

# phuong thuc de tinh toan cac thong so co ban
def calculate_all_metrics(G):
  """
  Tinh toan tat ca cac so do cua do thi
  Args:
    G: do thi networkX
    returns:
    dict: Dictionary chua cac so do cua do thi
  """

  metrics = {}
  #1. Thong tin co ban
  # |V|: so luong dinh trong do thi
  metrics['nodes'] = G.number_of_nodes()
  #|E|: so luong canh
  metrics['edges'] = G.number_of_edges()

  #tinh mat do do thi
  metrics["density"] = nx.density(G)
  # Mật độ đồ thị
  # Công thức: D = 2|E| / (|V|(|V|-1))
  # Trong đó:
  # - |E|: số cạnh thực tế
  # - |V|(|V|-1): số cạnh tối đa có thể có trong đồ thị vô hướng

  metrics['average_degree'] = np.mean([d for n, d in G.degree()])

  # 2. Degree metrics
  degrees = dict(G.degree())
  metrics['avg_degree'] = sum(degrees.values()) / len(degrees)
  # Degree trung bình
  # Công thức: <k> = (1/|V|) * Σ ki
  # Trong đó:
  # - |V|: số lượng đỉnh
  # - ki: degree của đỉnh i
  # Note: Trong đồ thị vô hướng: <k> = 2|E|/|V|

  metrics['max_degree'] = max(degrees.values())
  metrics['degrees'] = degrees

  # 3. Degree Centrality
  dc = nx.degree_centrality(G)
  metrics['degree_centrality'] = {
      'values': dc,
      'max': max(dc.values()),
      'avg': sum(dc.values()) / len(dc),
      'node_max': max(dc, key=dc.get)
  }
  # Degree Centrality
  # Công thức: CD(v) = deg(v)/(|V|-1)
  # Trong đó:
  # - deg(v): degree của đỉnh v
  # - |V|-1: số lượng kết nối tối đa có thể có của một đỉnh

  # 4. Betweenness Centrality
  bc = nx.betweenness_centrality(G)
  metrics['betweenness_centrality'] = {
      'values': bc,
      'max': max(bc.values()),
      'avg': sum(bc.values()) / len(bc),
      'node_max': max(bc, key=bc.get)
  }
  # Betweenness Centrality
  # Công thức: CB(v) = Σ (σst(v)/σst)
  # Trong đó:
  # - σst: số đường đi ngắn nhất từ đỉnh s đến đỉnh t
  # - σst(v): số đường đi ngắn nhất từ s đến t đi qua v
  # - Tổng được tính trên mọi cặp đỉnh s,t khác v

  # 5. Closeness Centrality
  cc = nx.closeness_centrality(G)
  metrics['closeness_centrality'] = {
      'values': cc,
      'max': max(cc.values()),
      'avg': sum(cc.values()) / len(cc),
      'node_max': max(cc, key=cc.get)
  }
  # Closeness Centrality
  # Công thức: CC(v) = (|V|-1) / Σ d(v,u)
  # Trong đó:
  # - |V|-1: số đỉnh khác v
  # - d(v,u): độ dài đường đi ngắn nhất từ v đến u
  # - Tổng được tính trên mọi đỉnh u khác v

  # 6. PageRank
  pr = nx.pagerank(G, alpha=0.85)
  metrics['pagerank'] = {
      'values': pr,
      'max': max(pr.values()),
      'avg': sum(pr.values()) / len(pr),
      'node_max': max(pr, key=pr.get)
  }
  # PageRank
  # Công thức: PR(v) = (1-d) + d * Σ (PR(u)/OutDegree(u))
  # Trong đó:
  # - d: damping factor (thường = 0.85)
  # - PR(u): PageRank của các đỉnh u kề với v
  # - OutDegree(u): bậc ra của đỉnh u
  # - Tổng được tính trên mọi đỉnh u kề với v

  return metrics

def print_detailed_results(metrics):
  """
  in ket qua cac phep do
  """
  print("=========PHAN TICH MANG XH=======")
  print("1.Thong tin co ban:")
  print(f"- So luong nodes (nguoi dung): {metrics['nodes']}")
  print(f"- So luong canh (ket noi): {metrics['edges']}")
  print(f"- Mat do do thi: {metrics['density']}")
  print(f"- Degree trung binh: {metrics['average_degree']}") #trung binh 1 nguoi dung co bao nhiu ban
  print(f"- Degree lon nhat: {metrics['max_degree']}")


  centrality_measures = {
        'Degree Centrality': 'degree_centrality',
        'Betweenness Centrality': 'betweenness_centrality',
        'Closeness Centrality': 'closeness_centrality',
        'PageRank': 'pagerank'
    }

  print("2. Các số đo Centrality")
  for name, measure in centrality_measures.items():
    print(f"- {name}")
    print(f"- Giá trị lớn nhất: {metrics[measure]['max']:.4f}")
    print(f"- Giá trị trung bình: {metrics[measure]['avg']:.4f}")
    print(f"- Node có giá trị cao nhất: {metrics[measure]['node_max']}")

df = download_and_read_data()
df.head()

#ve do thi tu du lieu tai ve
G = nx.from_pandas_edgelist(df, "source", "target")
metrics = calculate_all_metrics(G)
print_detailed_results(metrics)

def visualize_centrality(G, metrics):
    # Lấy giá trị của từng chỉ số centrality từ metrics
    degree_centrality = metrics['degree_centrality']
    betweenness_centrality = metrics['betweenness_centrality']
    closeness_centrality = metrics['closeness_centrality']
    pagerank = metrics['pagerank']

    # Tạo các biểu đồ con (subplots) 2x2
    fig, axs = plt.subplots(2, 2, figsize=(14, 12))

    # Danh sách màu sắc cho các biểu đồ
    colors = ['skyblue', 'lightgreen', 'salmon', 'lightcoral']

    # Biểu đồ Degree Centrality
    axs[0, 0].hist(list(degree_centrality.values()), bins=30, color=colors[0], edgecolor='black')
    axs[0, 0].set_title('Degree Centrality Distribution')
    axs[0, 0].set_xlabel('Degree Centrality')
    axs[0, 0].set_ylabel('Frequency')

    # Biểu đồ Betweenness Centrality
    axs[0, 1].hist(list(betweenness_centrality.values()), bins=30, color=colors[1], edgecolor='black')
    axs[0, 1].set_title('Betweenness Centrality Distribution')
    axs[0, 1].set_xlabel('Betweenness Centrality')
    axs[0, 1].set_ylabel('Frequency')

    # Biểu đồ Closeness Centrality
    axs[1, 0].hist(list(closeness_centrality.values()), bins=30, color=colors[2], edgecolor='black')
    axs[1, 0].set_title('Closeness Centrality Distribution')
    axs[1, 0].set_xlabel('Closeness Centrality')
    axs[1, 0].set_ylabel('Frequency')

    # Biểu đồ PageRank
    axs[1, 1].hist(list(pagerank.values()), bins=30, color=colors[3], edgecolor='black')
    axs[1, 1].set_title('PageRank Distribution')
    axs[1, 1].set_xlabel('PageRank')
    axs[1, 1].set_ylabel('Frequency')

    # Điều chỉnh layout để tránh chồng chéo
    plt.tight_layout()
    plt.show()



# Vẽ biểu đồ centrality
visualize_centrality(G, metrics)